import { useState } from 'react'
import { useToast } from '@/components/Toast'
import { adminReviewClaim } from '@/api/claims.api'

// ViewModel t·ªëi thi·ªÉu ƒë·ªÉ review (nh·∫≠n t·ª´ m√†n tr∆∞·ªõc)
export type ReviewClaimVM = {
  id: number
  status: string               // 'PENDING' | 'APPROVED' | 'REJECTED' | ...
  pointsRequested: number      // s·ªë ƒëi·ªÉm/miles ƒë·ªÅ ngh·ªã c·ªông/tr·ª´
  code?: string                // optional: hi·ªÉn th·ªã trong toast
  adminNote?: string           // ghi ch√∫ g·∫ßn nh·∫•t
}

/**
 * D√πng khi admin duy·ªát claim.
 * - Kh√¥ng fetch detail: nh·∫≠n s·∫µn d·ªØ li·ªáu t·ª´ m√†n g·ªçi.
 * - Ch·ªâ g·ªçi API review (approve/reject), r·ªìi c·∫≠p nh·∫≠t local state.
 */
export function useAdminClaimReview(initial: ReviewClaimVM) {
  const [data, setData] = useState<ReviewClaimVM>(initial)
  const [submitting, setSubmitting] = useState(false)
  const toast = useToast()

  async function approve(note?: string, points?: number) {
    setSubmitting(true)
    try {
      const res = await adminReviewClaim({
        id: data.id,
        action: 'approve',                        // üëà action theo API
        note: note ?? '',
        points: points ?? data.pointsRequested,   // n·∫øu kh√¥ng truy·ªÅn, d√πng m·∫∑c ƒë·ªãnh
      })
      // c·∫≠p nh·∫≠t local state theo response
      setData(prev => ({
        ...prev,
        status: res.status,
        pointsRequested: res.affected_points ?? prev.pointsRequested,
        adminNote: note ?? prev.adminNote,
      }))
      toast.success('Claim approved', {
        title: data.code || `#${data.id}`,
        appearance: 'solid',
      })
    } catch (e: any) {
      toast.error(e?.response?.data?.message || 'Approve failed', {
        title: data.code || `#${data.id}`,
        appearance: 'solid',
      })
    } finally {
      setSubmitting(false)
    }
  }

  async function reject(note: string) {
    if (!note?.trim()) {
      toast.error('Admin note is required for rejection', { title: 'Missing note' })
      return
    }
    setSubmitting(true)
    try {
      const res = await adminReviewClaim({
        id: data.id,
        action: 'reject',       // üëà action theo API
        note,
        points: 0,              // reject th∆∞·ªùng kh√¥ng c·ªông ƒëi·ªÉm
      })
      setData(prev => ({
        ...prev,
        status: res.status,
        adminNote: note,
      }))
      toast.success('Claim rejected', {
        title: data.code || `#${data.id}`,
        appearance: 'solid',
      })
    } catch (e: any) {
      toast.error(e?.response?.data?.message || 'Reject failed', {
        title: data.code || `#${data.id}`,
        appearance: 'solid',
      })
    } finally {
      setSubmitting(false)
    }
  }

  return { data, submitting, approve, reject }
}
